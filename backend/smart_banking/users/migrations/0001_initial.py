# Generated by Django 5.1.2 on 2025-03-08 08:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccountNumberTracker",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_account_number", models.PositiveIntegerField(default=100000)),
            ],
        ),
        migrations.CreateModel(
            name="AccountType",
            fields=[
                ("accountTypeID", models.AutoField(primary_key=True, serialize=False)),
                ("depositType", models.CharField(max_length=100)),
                ("depositRates", models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name="Address",
            fields=[
                ("addressID", models.AutoField(primary_key=True, serialize=False)),
                ("street", models.CharField(max_length=255)),
                ("city", models.CharField(max_length=100)),
                ("provinces", models.CharField(max_length=100)),
                ("district", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Admin",
            fields=[
                ("adminID", models.AutoField(primary_key=True, serialize=False)),
                ("department", models.CharField(max_length=100)),
                ("salary", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
        migrations.CreateModel(
            name="Customers",
            fields=[
                ("customerID", models.AutoField(primary_key=True, serialize=False)),
                ("beneficiary", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Loans",
            fields=[
                ("loanID", models.AutoField(primary_key=True, serialize=False)),
                ("loanTypes", models.CharField(max_length=100)),
                ("interestRates", models.DecimalField(decimal_places=2, max_digits=5)),
            ],
        ),
        migrations.CreateModel(
            name="Transactions",
            fields=[
                ("transactionID", models.AutoField(primary_key=True, serialize=False)),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("reference", models.CharField(max_length=255)),
                ("description", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="TransactionType",
            fields=[
                (
                    "transactionTypeID",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "transactionType",
                    models.CharField(
                        choices=[
                            ("withdraw", "Withdraw"),
                            ("deposit", "Deposit"),
                            ("transfer", "Transfer"),
                        ],
                        max_length=10,
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("userID", models.AutoField(primary_key=True, serialize=False)),
                ("firstName", models.CharField(max_length=100)),
                ("lastName", models.CharField(max_length=100)),
                ("phoneNumber", models.CharField(max_length=15, unique=True)),
                ("createdAt", models.DateTimeField(auto_now_add=True)),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("dateOfBirth", models.DateField()),
                ("panNumber", models.CharField(max_length=20, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "addressID",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="users.address"
                    ),
                ),
                (
                    "adminID",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.admin",
                    ),
                ),
                (
                    "customerID",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.customers",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Account",
            fields=[
                (
                    "accountNumber",
                    models.BigIntegerField(
                        primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("balance", models.DecimalField(decimal_places=2, max_digits=15)),
                (
                    "accountTypeID",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.accounttype",
                    ),
                ),
                (
                    "loanID",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.loans",
                    ),
                ),
                (
                    "transactionID",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="users.transactions",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="transactions",
            name="transactionTypeID",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="users.transactiontype"
            ),
        ),
    ]
